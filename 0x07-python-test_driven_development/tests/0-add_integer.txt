The "0-add_integer" module
============================

This module defines an integer addition function "add_integer(a, b=98)"


How to use "add_integer" function
=================================

Importing the module
>>> add_integer = __import__('0-add_integer').add_integer


=== Test Cases ===

Adding 1 and 2
>>> add_integer(1, 2)
3

Adding -5 and 10
>>> add_integer(-5, 10)
5

Adding 100 and -2
>>> add_integer(100, -2)
98


------------------------------
This function also works with floating point values.
Floats are casted to ints before addition is perfomed.
Also, floating and non-floating point values can be combined.


Adding 3.14 and 2.5
>>> add_integer(3.14, 2.5)
5


Adding -10.6 and 5.8
>>> add_integer(-10.6, 5.8)
-4


Ading 2.3 and -3
>>> add_integer(2.3, -3)
-1

Adding 7.8 and 2
>>> add_integer(7.8, 2)
9

Passing a float as a default value of b
>>> add_integer(5, b=2.3)
7

Adding -10.6 and 5.8
>>> add_integer(-10.6, 5.8)
-4

Passing non-numeric inputs
>>> add_integer("5", 10)
Traceback (most recent call last):
	...
TypeError: a must be an integer


Adding a letter and a number
>>> add_integer('1', 1)
Traceback (most recent call last):
	...
TypeError: a must be an integer


Adding two letters
>>> add_integer('2', '1')
Traceback (most recent call last):
	...
TypeError: a must be an integer


Adding a number and a string
>>> add_integer(7, "Hello")
Traceback (most recent call last):
	...
TypeError: b must be an integer


Passing strings
>>> add_integer("abc", "def")
Traceback (most recent call last):
	...
TypeError: a must be an integer

>>> add_integer("Hello", "School")
Traceback (most recent call last):
	...
TypeError: a must be an integer


Adding a number and a list
>>> add_integer([], 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

>>> add_integer(3, [4, 5])
Traceback (most recent call last):
	...
TypeError: b must be an integer


Passing None
>>> add_integer(None)
Traceback (most recent call last):
	...
TypeError: a must be an integer


Case Overflow: Passing float infinity as an argument
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('inf'), float('-inf'))
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer


Case NaN: Checks for NaN type
>>> add_integer(0, float('nan'))
Traceback (most recent call last):
	...
ValueError: cannot convert float NaN to integer
